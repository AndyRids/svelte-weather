import './App.css.proxy.js';
/* src\App.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { onMount } from "../web_modules/svelte.js";

// stores
import { databaseStore, locationStore } from "./stores/stores.js";

// components
import MainView from "./components/views/MainView.js";

function create_if_block(ctx) {
	let mainview;
	let current;
	mainview = new MainView({});

	return {
		c() {
			create_component(mainview.$$.fragment);
		},
		m(target, anchor) {
			mount_component(mainview, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(mainview.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(mainview.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(mainview, detaching);
		}
	};
}

function create_fragment(ctx) {
	let main;
	let current;
	let if_block = /*isRetrieved*/ ctx[0] !== null && create_if_block(ctx);

	return {
		c() {
			main = element("main");
			if (if_block) if_block.c();
			attr(main, "class", "main svelte-14gkhs1");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			if (if_block) if_block.m(main, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*isRetrieved*/ ctx[0] !== null) {
				if (if_block) {
					if (dirty & /*isRetrieved*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(main, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let isRetrieved;
	let bookmarks;
	let $databaseStore;
	component_subscribe($$self, databaseStore, $$value => $$invalidate(3, $databaseStore = $$value));
	let setBookmark;

	/**
 * used to set the location store value to the first location
 * object in the bookmarked locations array (bookmarks).
 *
 * @param {Object} bookmark - bookmarked location object
 */
	const setFirstBookmark = bookmark => {
		bookmark && locationStore.setLocationInfo(bookmark);
		$$invalidate(1, setBookmark = false);
	};

	// App is only mounted once, allowing a App first load flag
	onMount(() => $$invalidate(1, setBookmark = true));

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$databaseStore*/ 8) {
			$: $$invalidate(0, { status: { isRetrieved }, bookmarks } = $databaseStore, isRetrieved, ($$invalidate(2, bookmarks), $$invalidate(3, $databaseStore)));
		}

		if ($$self.$$.dirty & /*setBookmark, isRetrieved, bookmarks*/ 7) {
			$: if (setBookmark && isRetrieved !== null) setFirstBookmark(bookmarks[0]);
		}
	};

	return [isRetrieved, setBookmark, bookmarks, $databaseStore];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;