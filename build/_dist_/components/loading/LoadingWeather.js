import './LoadingWeather.css.proxy.js';
/* src\components\loading\LoadingWeather.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text
} from "../../../web_modules/svelte/internal.js";

import { networkStatus } from "../../stores/stores.js";

function create_fragment(ctx) {
	let div2;
	let div1;
	let p0;
	let t0_value = (/*isOnline*/ ctx[0] ? "Online" : "Offline") + "";
	let t0;
	let t1;
	let p0_class_value;
	let t2;
	let p1;
	let t4;
	let div0;

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			p0 = element("p");
			t0 = text(t0_value);
			t1 = text(".");
			t2 = space();
			p1 = element("p");
			p1.textContent = "Updating Weather.";
			t4 = space();
			div0 = element("div");
			attr(p0, "class", p0_class_value = "spinner-text online-" + `${/*isOnline*/ ctx[0]}` + " svelte-1y9or6s");
			attr(p1, "class", "spinner-text svelte-1y9or6s");
			attr(div0, "class", "spinner svelte-1y9or6s");
			set_style(div0, "--size", "100px");
			set_style(div0, "--color", "#5a7abe");
			attr(div1, "class", "wrapper-spinner svelte-1y9or6s");
			attr(div2, "class", "wrapper-flex wrapper-flex--modal");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, p0);
			append(p0, t0);
			append(p0, t1);
			append(div1, t2);
			append(div1, p1);
			append(div1, t4);
			append(div1, div0);
		},
		p(ctx, [dirty]) {
			if (dirty & /*isOnline*/ 1 && t0_value !== (t0_value = (/*isOnline*/ ctx[0] ? "Online" : "Offline") + "")) set_data(t0, t0_value);

			if (dirty & /*isOnline*/ 1 && p0_class_value !== (p0_class_value = "spinner-text online-" + `${/*isOnline*/ ctx[0]}` + " svelte-1y9or6s")) {
				attr(p0, "class", p0_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let isOnline;
	let $networkStatus;
	component_subscribe($$self, networkStatus, $$value => $$invalidate(1, $networkStatus = $$value));

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$networkStatus*/ 2) {
			$: $$invalidate(0, { isOnline } = $networkStatus, isOnline);
		}
	};

	return [isOnline, $networkStatus];
}

class LoadingWeather extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default LoadingWeather;