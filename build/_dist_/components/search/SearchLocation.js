import './SearchLocation.css.proxy.js';
/* src\components\search\SearchLocation.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { locationStore } from "../../stores/stores.js";

// components
import SectionHeading from "../heading/SectionHeading.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i].longLabel;
	child_ctx[9] = i;
	return child_ctx;
}

// (60:0) {#if searchResults.length}
function create_if_block(ctx) {
	let section;
	let each_value = /*searchResults*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			section = element("section");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(section, "class", "search-results svelte-1uyh45i");
		},
		m(target, anchor) {
			insert(target, section, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(section, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*resultHandler, searchResults*/ 20) {
				each_value = /*searchResults*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(section, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(section);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (63:4) {#each searchResults as { longLabel }
function create_each_block(ctx) {
	let div;
	let t_value = /*longLabel*/ ctx[7] + "";
	let t;
	let div_data_index_value;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			attr(div, "class", "search-results__result svelte-1uyh45i");
			attr(div, "data-index", div_data_index_value = /*index*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);

			if (!mounted) {
				dispose = listen(div, "click", /*resultHandler*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*searchResults*/ 4 && t_value !== (t_value = /*longLabel*/ ctx[7] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let t2;
	let section;
	let input;
	let t3;
	let button;
	let t4;
	let sectionheading;
	let t5;
	let if_block_anchor;
	let current;
	let mounted;
	let dispose;
	sectionheading = new SectionHeading({ props: { title: "Search results" } });
	let if_block = /*searchResults*/ ctx[2].length && create_if_block(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");

			div0.innerHTML = `<img class="heading-back__icon" src="icons/buttons/back.svg" alt="left arrow"/> 
    <span class="heading-back__title svelte-1uyh45i">Location search</span>`;

			t2 = space();
			section = element("section");
			input = element("input");
			t3 = space();
			button = element("button");
			button.innerHTML = `<img class="button__search-icon" src="./icons/buttons/search.svg" alt="Search button"/>`;
			t4 = space();
			create_component(sectionheading.$$.fragment);
			t5 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr(div0, "class", "heading-back svelte-1uyh45i");
			attr(div1, "class", "wrapper-heading");
			attr(input, "class", "input search__input svelte-1uyh45i");
			attr(input, "type", "text");
			attr(input, "placeholder", "Search for a city...");
			attr(input, "pattern", "^[a-zA-Z]*$");
			attr(button, "class", "button button--main search__button svelte-1uyh45i");
			attr(section, "class", "search svelte-1uyh45i");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			insert(target, t2, anchor);
			insert(target, section, anchor);
			append(section, input);
			set_input_value(input, /*searchText*/ ctx[1]);
			append(section, t3);
			append(section, button);
			insert(target, t4, anchor);
			mount_component(sectionheading, target, anchor);
			insert(target, t5, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", /*click_handler*/ ctx[5]),
					listen(input, "input", /*input_input_handler*/ ctx[6]),
					listen(button, "click", /*searchHandler*/ ctx[3])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*searchText*/ 2 && input.value !== /*searchText*/ ctx[1]) {
				set_input_value(input, /*searchText*/ ctx[1]);
			}

			if (/*searchResults*/ ctx[2].length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(sectionheading.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(sectionheading.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (detaching) detach(t2);
			if (detaching) detach(section);
			if (detaching) detach(t4);
			destroy_component(sectionheading, detaching);
			if (detaching) detach(t5);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { componentName } = $$props;

	// user search text
	let searchText = "";

	// array of search results
	let searchResults = [];

	// when searchButton is clicked
	function searchHandler() {
		// if input is not empty
		if (searchText) {
			// attempt geocode API with searchText
			locationStore.tryForwardGeocode(searchText).then(data => $$invalidate(2, searchResults = data)).catch(error => console.log(error)).finally(() => $$invalidate(1, searchText = ""));
		}
	}

	function resultHandler({ target }) {
		// index of result in searchResults array
		const index = Number(target.dataset.index);

		console.log(target, searchResults);
		locationStore.setLocationInfo(searchResults[index]);
		$$invalidate(2, searchResults = []);
		$$invalidate(0, componentName = "Weather");
	}

	const click_handler = () => $$invalidate(0, componentName = "Weather");

	function input_input_handler() {
		searchText = this.value;
		$$invalidate(1, searchText);
	}

	$$self.$$set = $$props => {
		if ("componentName" in $$props) $$invalidate(0, componentName = $$props.componentName);
	};

	return [
		componentName,
		searchText,
		searchResults,
		searchHandler,
		resultHandler,
		click_handler,
		input_input_handler
	];
}

class SearchLocation extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { componentName: 0 });
	}
}

export default SearchLocation;