import './Basic.css.proxy.js';
/* src\components\weather\Basic.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text
} from "../../../web_modules/svelte/internal.js";

import { locationStore } from "../../stores/stores.js";

function create_fragment(ctx) {
	let section;
	let div1;
	let button0;
	let t0;
	let div0;
	let t1;
	let t2;
	let button1;
	let t3;
	let div2;

	let t4_value = (/*hourly*/ ctx[1][/*hourlyIndex*/ ctx[2]]
	? /*hourly*/ ctx[1][/*hourlyIndex*/ ctx[2]].description
	: "") + "";

	let t4;
	let t5;
	let div6;
	let div3;
	let img2;
	let img2_src_value;
	let t6;
	let span0;

	let t7_value = ((/*current*/ ctx[0]?.sunrise)
	? /*current*/ ctx[0].sunrise
	: "") + "";

	let t7;
	let t8;
	let div4;

	let t9_value = (/*hourly*/ ctx[1][0]
	? /*hourly*/ ctx[1][/*hourlyIndex*/ ctx[2]].temp
	: "") + "";

	let t9;
	let t10_value = /*tempUnit*/ ctx[5][/*units*/ ctx[3]] + "";
	let t10;
	let t11;
	let div5;
	let img3;
	let img3_src_value;
	let t12;
	let span1;

	let t13_value = ((/*current*/ ctx[0]?.sunset)
	? /*current*/ ctx[0].sunset
	: "") + "";

	let t13;
	let mounted;
	let dispose;

	return {
		c() {
			section = element("section");
			div1 = element("div");
			button0 = element("button");
			button0.innerHTML = `<img class="button__back-icon" src="./icons/buttons/back.svg" alt="back" width="25px" height="25px"/>`;
			t0 = space();
			div0 = element("div");
			t1 = text(/*shortLabel*/ ctx[4]);
			t2 = space();
			button1 = element("button");
			button1.innerHTML = `<img class="button__next-icon" src="./icons/buttons/next.svg" alt="next" width="25px" height="25px"/>`;
			t3 = space();
			div2 = element("div");
			t4 = text(t4_value);
			t5 = space();
			div6 = element("div");
			div3 = element("div");
			img2 = element("img");
			t6 = space();
			span0 = element("span");
			t7 = text(t7_value);
			t8 = space();
			div4 = element("div");
			t9 = text(t9_value);
			t10 = text(t10_value);
			t11 = space();
			div5 = element("div");
			img3 = element("img");
			t12 = space();
			span1 = element("span");
			t13 = text(t13_value);
			attr(button0, "class", "button button--main button--back");
			attr(button0, "type", "button");
			attr(div0, "class", "weather-basic__location svelte-j81cdw");
			attr(button1, "class", "button button--main button--next");
			attr(button1, "type", "button");
			attr(div1, "class", "wrapper-flex wrapper-flex--space-between");
			attr(div2, "class", "weather-basic__description svelte-j81cdw");
			attr(img2, "class", "weather-basic__sunrise-icon");
			if (img2.src !== (img2_src_value = "./icons/cards/sunrise.svg")) attr(img2, "src", img2_src_value);
			attr(img2, "alt", "sunrise icon");
			attr(img2, "width", "30px");
			attr(img2, "height", "30px");
			attr(span0, "class", "weather-basic__sunrise-time svelte-j81cdw");
			attr(div3, "class", "wrapper-flex wrapper-flex--column");
			attr(div4, "class", "weather-basic__temp svelte-j81cdw");
			attr(img3, "class", "weather-basic__sunset-icon");
			if (img3.src !== (img3_src_value = "./icons/cards/sunset.svg")) attr(img3, "src", img3_src_value);
			attr(img3, "alt", "sunset icon");
			attr(img3, "width", "30px");
			attr(img3, "height", "30px");
			attr(span1, "class", "weather-basic__sunset-time svelte-j81cdw");
			attr(div5, "class", "wrapper-flex wrapper-flex--column");
			attr(div6, "class", "wrapper-flex");
			attr(section, "class", "weather-basic svelte-j81cdw");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div1);
			append(div1, button0);
			append(div1, t0);
			append(div1, div0);
			append(div0, t1);
			append(div1, t2);
			append(div1, button1);
			append(section, t3);
			append(section, div2);
			append(div2, t4);
			append(section, t5);
			append(section, div6);
			append(div6, div3);
			append(div3, img2);
			append(div3, t6);
			append(div3, span0);
			append(span0, t7);
			append(div6, t8);
			append(div6, div4);
			append(div4, t9);
			append(div4, t10);
			append(div6, t11);
			append(div6, div5);
			append(div5, img3);
			append(div5, t12);
			append(div5, span1);
			append(span1, t13);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*previousBookmark*/ ctx[7]),
					listen(button1, "click", /*nextBookmark*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*shortLabel*/ 16) set_data(t1, /*shortLabel*/ ctx[4]);

			if (dirty & /*hourly, hourlyIndex*/ 6 && t4_value !== (t4_value = (/*hourly*/ ctx[1][/*hourlyIndex*/ ctx[2]]
			? /*hourly*/ ctx[1][/*hourlyIndex*/ ctx[2]].description
			: "") + "")) set_data(t4, t4_value);

			if (dirty & /*current*/ 1 && t7_value !== (t7_value = ((/*current*/ ctx[0]?.sunrise)
			? /*current*/ ctx[0].sunrise
			: "") + "")) set_data(t7, t7_value);

			if (dirty & /*hourly, hourlyIndex*/ 6 && t9_value !== (t9_value = (/*hourly*/ ctx[1][0]
			? /*hourly*/ ctx[1][/*hourlyIndex*/ ctx[2]].temp
			: "") + "")) set_data(t9, t9_value);

			if (dirty & /*units*/ 8 && t10_value !== (t10_value = /*tempUnit*/ ctx[5][/*units*/ ctx[3]] + "")) set_data(t10, t10_value);

			if (dirty & /*current*/ 1 && t13_value !== (t13_value = ((/*current*/ ctx[0]?.sunset)
			? /*current*/ ctx[0].sunset
			: "") + "")) set_data(t13, t13_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let shortLabel;
	let longLabel;
	let isBookmarked;
	let $locationStore;
	component_subscribe($$self, locationStore, $$value => $$invalidate(11, $locationStore = $$value));
	let { current } = $$props;
	let { hourly } = $$props;
	let { hourlyIndex } = $$props;
	let { bookmarks } = $$props;
	let { units } = $$props;
	let { bookmarkIndex } = $$props;

	// tempUnit[units] ({ units } = $databaseStore.settings) is used to display 'C'/'F'
	const tempUnit = { metric: "C", imperial: "F" };

	const nextBookmark = () => {
		if (!bookmarks.length || bookmarks.length < 2 || !bookmarks[bookmarkIndex + 1]) return;
		$$invalidate(8, bookmarkIndex = isBookmarked ? bookmarkIndex + 1 : 0);
		locationStore.setLocationInfo(bookmarks[bookmarkIndex], longLabel);
	};

	const previousBookmark = () => {
		if (!bookmarks.length || bookmarks.length < 2 || !bookmarks[bookmarkIndex - 1]) return;
		$$invalidate(8, bookmarkIndex = isBookmarked ? bookmarkIndex - 1 : 0);
		locationStore.setLocationInfo(bookmarks[bookmarkIndex], longLabel);
	};

	const checkBookmarks = (all, currentLongLabel) => {
		if (Array.isArray(all) && !all.length) return false;

		// convert longLabel property in each bookmark to a string for comparison
		const longLabelStrings = all.map(({ longLabel }) => JSON.stringify(longLabel));

		// if current longLabel is bookmarked, return true
		return longLabelStrings.includes(JSON.stringify(currentLongLabel));
	};

	$$self.$$set = $$props => {
		if ("current" in $$props) $$invalidate(0, current = $$props.current);
		if ("hourly" in $$props) $$invalidate(1, hourly = $$props.hourly);
		if ("hourlyIndex" in $$props) $$invalidate(2, hourlyIndex = $$props.hourlyIndex);
		if ("bookmarks" in $$props) $$invalidate(9, bookmarks = $$props.bookmarks);
		if ("units" in $$props) $$invalidate(3, units = $$props.units);
		if ("bookmarkIndex" in $$props) $$invalidate(8, bookmarkIndex = $$props.bookmarkIndex);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$locationStore*/ 2048) {
			// shortLabel (city & country code) & longLabel (descriptive label)
			$: $$invalidate(4, { shortLabel, longLabel } = $locationStore, shortLabel, ($$invalidate(10, longLabel), $$invalidate(11, $locationStore)));
		}

		if ($$self.$$.dirty & /*bookmarks, longLabel*/ 1536) {
			// is current city bookmarked by the user
			$: isBookmarked = checkBookmarks(bookmarks, longLabel);
		}

		if ($$self.$$.dirty & /*bookmarkIndex*/ 256) {
			$: console.log("Watching:", bookmarkIndex);
		}
	};

	return [
		current,
		hourly,
		hourlyIndex,
		units,
		shortLabel,
		tempUnit,
		nextBookmark,
		previousBookmark,
		bookmarkIndex,
		bookmarks,
		longLabel,
		$locationStore
	];
}

class Basic extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			current: 0,
			hourly: 1,
			hourlyIndex: 2,
			bookmarks: 9,
			units: 3,
			bookmarkIndex: 8
		});
	}
}

export default Basic;