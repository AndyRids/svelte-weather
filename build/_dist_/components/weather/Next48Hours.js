import './Next48Hours.css.proxy.js';
/* src\components\weather\Next48Hours.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../../../web_modules/svelte/internal.js";

import dragToScroll from "../../actions/dragToScroll.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i].time !== undefined ? list[i].time : "";

	child_ctx[6] = list[i].weatherIcon !== undefined
	? list[i].weatherIcon
	: "";

	child_ctx[7] = list[i].temp !== undefined ? list[i].temp : "";
	child_ctx[9] = i;
	return child_ctx;
}

// (28:4) {#each hourly as { time ='', weatherIcon = '', temp = '' }
function create_each_block(ctx) {
	let article;
	let div0;
	let h3;
	let t1;
	let img0;
	let img0_src_value;
	let div0_class_value;
	let div0_data_index_value;
	let t2;
	let div3;
	let div1;
	let t3_value = /*time*/ ctx[5] + "";
	let t3;
	let t4;
	let img1;
	let img1_src_value;
	let t5;
	let div2;
	let t6_value = /*temp*/ ctx[7] + "";
	let t6;
	let t7_value = /*tempUnit*/ ctx[3][/*units*/ ctx[2]] + "";
	let t7;
	let t8;
	let mounted;
	let dispose;

	return {
		c() {
			article = element("article");
			div0 = element("div");
			h3 = element("h3");
			h3.textContent = "Details";
			t1 = space();
			img0 = element("img");
			t2 = space();
			div3 = element("div");
			div1 = element("div");
			t3 = text(t3_value);
			t4 = space();
			img1 = element("img");
			t5 = space();
			div2 = element("div");
			t6 = text(t6_value);
			t7 = text(t7_value);
			t8 = space();
			attr(h3, "class", "hour-card__title svelte-2lq7or");
			if (img0.src !== (img0_src_value = "./icons/headers/pointer.svg")) attr(img0, "src", img0_src_value);
			attr(img0, "alt", "Arrow icon");
			attr(img0, "class", "hour-card__title-icon svelte-2lq7or");
			attr(img0, "height", "20px");
			attr(img0, "width", "20px");

			attr(div0, "class", div0_class_value = "hour-card__header " + (/*index*/ ctx[9] === /*hourlyIndex*/ ctx[0]
			? "header--highlight"
			: "") + " svelte-2lq7or");

			attr(div0, "data-index", div0_data_index_value = /*index*/ ctx[9]);
			attr(div1, "class", "hour-card__time");
			if (img1.src !== (img1_src_value = "./icons/weather/" + /*weatherIcon*/ ctx[6] + ".svg")) attr(img1, "src", img1_src_value);
			attr(img1, "alt", "Weather icon");
			attr(img1, "class", "hour-card__weather-icon");
			attr(img1, "height", "28px");
			attr(img1, "width", "28px");
			attr(img1, "draggable", "false");
			attr(div2, "class", "hour-card__temperature");
			attr(div3, "class", "hour-card__body svelte-2lq7or");
			attr(article, "class", "hour-card svelte-2lq7or");
		},
		m(target, anchor) {
			insert(target, article, anchor);
			append(article, div0);
			append(div0, h3);
			append(div0, t1);
			append(div0, img0);
			append(article, t2);
			append(article, div3);
			append(div3, div1);
			append(div1, t3);
			append(div3, t4);
			append(div3, img1);
			append(div3, t5);
			append(div3, div2);
			append(div2, t6);
			append(div2, t7);
			append(article, t8);

			if (!mounted) {
				dispose = listen(div0, "pointerdown", /*changeIndex*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*hourlyIndex*/ 1 && div0_class_value !== (div0_class_value = "hour-card__header " + (/*index*/ ctx[9] === /*hourlyIndex*/ ctx[0]
			? "header--highlight"
			: "") + " svelte-2lq7or")) {
				attr(div0, "class", div0_class_value);
			}

			if (dirty & /*hourly*/ 2 && t3_value !== (t3_value = /*time*/ ctx[5] + "")) set_data(t3, t3_value);

			if (dirty & /*hourly*/ 2 && img1.src !== (img1_src_value = "./icons/weather/" + /*weatherIcon*/ ctx[6] + ".svg")) {
				attr(img1, "src", img1_src_value);
			}

			if (dirty & /*hourly*/ 2 && t6_value !== (t6_value = /*temp*/ ctx[7] + "")) set_data(t6, t6_value);
			if (dirty & /*units*/ 4 && t7_value !== (t7_value = /*tempUnit*/ ctx[3][/*units*/ ctx[2]] + "")) set_data(t7, t7_value);
		},
		d(detaching) {
			if (detaching) detach(article);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let dragToScroll_action;
	let mounted;
	let dispose;
	let each_value = /*hourly*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "wrapper-scroll svelte-2lq7or");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			if (!mounted) {
				dispose = action_destroyer(dragToScroll_action = dragToScroll.call(null, div));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*tempUnit, units, hourly, hourlyIndex, changeIndex*/ 31) {
				each_value = /*hourly*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { hourly } = $$props;
	let { hourlyIndex = 0 } = $$props;
	let { units } = $$props;

	// tempUnit[units] ({ units } = $databaseStore.settings) is used to display 'C'/'F'
	const tempUnit = { metric: "C", imperial: "F" };

	/**
 * used to destructure the data-index attribute value from pointerdown event target
 * and set hourlyIndex to that value.
 *
 * @param {String} index - data-index attribute value 
 */
	const changeIndex = ({ target: { dataset } }) => $$invalidate(0, hourlyIndex = Number(dataset.index));

	$$self.$$set = $$props => {
		if ("hourly" in $$props) $$invalidate(1, hourly = $$props.hourly);
		if ("hourlyIndex" in $$props) $$invalidate(0, hourlyIndex = $$props.hourlyIndex);
		if ("units" in $$props) $$invalidate(2, units = $$props.units);
	};

	return [hourlyIndex, hourly, units, tempUnit, changeIndex];
}

class Next48Hours extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { hourly: 1, hourlyIndex: 0, units: 2 });
	}
}

export default Next48Hours;